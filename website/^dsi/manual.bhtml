<!--#set var="title" value="Documentation"-->
<!--#include file="~begin.fhtml"-->

<article>

<p>
   See the <a href=".#example">Bookstore Example</a> for an overview of using dna.js
   Template Cloner.&nbsp;  For richer examples, view the HTML source of the
   <a href="test-cases.html">Test Cases</a>.
</p>

<div class=toc>
   <h2>Contents:</h2>
   <ol>
      <li><a href="#terms-requirements">Terms and System Requirements</a></li>
      <li><a href="#setup">Setup</a>
         <ol>
            <li><a href="#setup-css">CSS</a></li>
            <li><a href="#setup-js">JavaScript Libraries</a></li>
         </ol>
      </li>
      <li><a href="#html">HTML &mdash; Classes and Attributes</a>
         <ol>
            <li><a href="#html-template">DNA Template</a></li>
            <li><a href="#html-field">DNA Field</a></li>
            <li><a href="#html-attr">DNA Attribute</a></li>
            <li><a href="#html-prop">DNA Property</a></li>
            <li><a href="#html-class">DNA Class</a></li>
            <li><a href="#html-example">Ensemble</a></li>
         </ol>
      </li>
      <li><a href="#api">JavaScript API</a>
         <ol>
            <li><a href="#api-clone">dna.clone()</a></li>
            <li><a href="#api-clone-sub-template">dna.cloneSubTemplate()</a></li>
            <li><a href="#api-load">dna.load()</a></li>
            <li><a href="#api-get-model">dna.getModel()</a></li>
            <li><a href="#api-empty">dna.empty()</a></li>
            <li><a href="#api-mutate">dna.mutate()</a></li>
            <li><a href="#api-mutate-all">dna.mutateAll()</a></li>
            <li><a href="#api-destroy">dna.destroy()</a></li>
            <li><a href="#api-get-clone">dna.getClone()</a></li>
            <li><a href="#api-get-clones">dna.getClones()</a></li>
            <li><a href="#api-bye">dna.bye()</a></li>
            <li><a href="#api-register-initializer">dna.registerInitializer()</a></li>
            <li><a href="#api-clear-initializers">dna.clearInitializers()</a></li>
            <li><a href="#api-info">dna.info()</a></li>
         </ol>
      </li>
      <li><a href="#loop">Looping</a>
         <ol>
            <li><a href="#loop-templates">Template Array Loops</a></li>
            <li><a href="#loop-sub-templates">Sub-template Array Loops</a></li>
            <li><a href="#loop-primitives">Arrays of Primitives (strings, numbers, booleans)</a></li>
            <li><a href="#loop-separators">Separators</a></li>
         </ol>
      </li>
      <li><a href="#event">Events and Callbacks</a>
         <ol>
            <li><a href="#event-element-setup">Element Setup</a></li>
            <li><a href="#event-user">Click, Change, and Key Events</a></li>
            <li><a href="#event-initializer">Initializers</a></li>
            <li><a href="#event-callback-option">Callback Options</a></li>
         </ol>
      </li>
      <li><a href="#structure">Structures and Conditional Logic</a>
         <ol>
            <li><a href="#structure-nested-object">Object Dot Notation (nested objects)</a></li>
            <li><a href="#structure-thimblerig">Thimblerig (conditional hide and seek logic)</a></li>
            <li><a href="#structure-nested-template">Nested Templates</a></li>
         </ol>
      </li>
      <li><a href="#util">Utilities</a></li>
      <li><a href="#reserved">Index of DNA Classes and Data Attributes</a></li>
   </ol>
</div>

<!--*********************************************************************************************-->
<h3 id=terms-requirements>Terms and System Requirements</h3>
<h4 id=terms>Terms</h4>
<dl>
   <dt>DNA Template:</dt>
   <dd>
      An HTML element whose clones will be injected with data from JavaScript
      objects.&nbsp;  The element has the <code>dna-template</code> class.
   </dd>
</dl>
<dl>
   <dt>DNA Field:</dt>
   <dd>
      DNA fields identify where in the template data is to be injected
      during the cloning process (example: <code>~~author~~</code>).
   </dd>
</dl>
<dl>
   <dt>DNA Strand:</dt>
   <dd>
      A pair of double tildes (<code>~~</code>) used to surround a field name (a.k.a.
      DNA base pair).&nbsp;
      Mustache notation with curly braces (<code>{{</code> and <code>}}</code>)
      is also supported.
   </dd>
</dl>
<dl>
   <dt>DNA Clone:</dt>
   <dd>
      A DOM element that is made by copying a DNA Template.  The template name
      is added as each clone's class name.
   </dd>
</dl>
<dl>
   <dt>Junk DNA:</dt>
   <dd>Not permitted in this project.</dd>
</dl>
<br>
<h4 id=requirements>System Requirements</h4>
<dl>
   <dt>Web Browsers:</dt>
   <dd>
      dna.js supports Chrome, Internet Exploder, Firefox, Opera, and Safari.
   </dd>
</dl>
<dl>
   <dt>Versions:</dt>
   <dd>
      dna.js requires jQuery 1.8 or above, and it has the same system requirements
      and <a href="http://jquery.com/browser-support/" class=external-site>browser
      support</a> as the version of jQuery you use.
   </dd>
</dl>

<!--*********************************************************************************************-->
<h3 id=setup>Setup</h3>

<!-- - - - - - - - - - - - - - - - - - - - - -->
<section id=setup-css>
   <h4>CSS</h4>
   <p>
      Add the following line to your website's CSS so the DNA templates are not
      displayed in the browser.
   </p>
   <figure>
      <figcaption>CSS to hide templates</figcaption>
      <pre><code class=language-css>
         .dna-template { display: none; }
      </code></pre>
   </figure>
   <p>
      <b>Note:</b> The first call to <code>dna.clone()</code> detaches the template
      from the DOM, so the above line of CSS is technically not required if you
      always call <code>dna.clone()</code> before the web page is displayed.
   </p>
</section>

<!-- - - - - - - - - - - - - - - - - - - - - -->
<section id=setup-js>
   <h4>JavaScript Libraries</h4>
   <p>
      Download the
      <code><a href="https://raw.github.com/dnajs/dna.js/current/dna.min.js" class=external-site>dna.min.js</a></code>
      file (or the
      <code><a href="https://raw.github.com/dnajs/dna.js/current/dna.js" class=external-site>dna.js</a></code>
      uncompressed version) from GitHub and include it in your website.&nbsp;
      <!--#echo var="name"--> requires jQuery.
   </p>
   <p>
      Example of loading jQuery, dna.js, and your JavaScript web application:
   </p>
   <figure>
      <figcaption>Load libraries</figcaption>
      <pre><code class=language-html>
         ...
         &lt;script src=&quot;js/jquery.min.js&quot;&gt;&lt;/script&gt;
         &lt;script src=&quot;js/dna.min.js&quot;&gt;&lt;/script&gt;
         &lt;script src=&quot;js/your-app.js&quot;&gt;&lt;/script&gt;
         &lt;/body&gt;
         &lt;/html&gt;
      </code></pre>
   </figure>
   <p>
      For experimentation and development, you can <a href="dna.js">link</a> directly to:<br>
      <code class=indent>http://dnajs.org/dna.js</code>
   </p>
</section>

<!--*********************************************************************************************-->
<h3 id=html>HTML &mdash; Classes and Attributes</h3>

<!-- - - - - - - - - - - - - - - - - - - - - -->
<section id=html-template>
   <h4>DNA Template</h4>
   <p>
      Use the class <code>dna-template</code> to indicate a template.&nbsp;  The <code>id</code>
      attribute of the element is the template name.
   </p>
   <figure>
      <figcaption>Example HTML</figcaption>
      <pre><code class=language-html>
         &lt;div id=book class=dna-template&gt;
      </code></pre>
   </figure>
</section>

<!-- - - - - - - - - - - - - - - - - - - - - -->
<section id=html-field>
   <h4>DNA Field</h4>
   <p>
      Enclose data field names in double tildes.&nbsp;  Each field takes up the entire
      text part of the HTML node.
   </p>
   <figure>
      <figcaption>Example HTML</figcaption>
      <pre><code class=language-html>
         &lt;span&gt;~~title~~&lt;/span&gt;
      </code></pre>
   </figure>
   <p>
      The field name referes to the field in the data object.&nbsp;  If the data
      is a simple literal (string, number, or boolean) rather than an object,
      use the special name <code>[value]</code> for the field.
   </p>
   <figure>
      <figcaption>Example HTML</figcaption>
      <pre><code class=language-html>
         &lt;span&gt;~~[value]~~&lt;/span&gt;
      </code></pre>
   </figure>
</section>

<!-- - - - - - - - - - - - - - - - - - - - - -->
<section id=html-attr>
   <h4>DNA Attribute</h4>
   <p>
      Attributes are set using the same notation as fields.
   </p>
   <figure>
      <figcaption>Example HTML</figcaption>
      <pre><code class=language-html>
         &lt;div id=~~code~~&gt;
      </code></pre>
   </figure>
   <p>
      Attributes can also be set by prefixing <code>data-attr-</code> to the attribute
      name.
   </p>
   <figure>
      <figcaption>Example HTML</figcaption>
      <pre><code class=language-html>
         &lt;img data-attr-src=~~url~~ alt="Profile avatar"&gt;
      </code></pre>
   </figure>
   <p>
      The prefixing technique enables setting the <code>src</code> attribute for an
      <code>img</code> node without causing the browser to fetch the image until the
      <code>src</code> attribute is actually set.&nbsp;  This technique can also be used to set the
      <code>id</code> when the regular technique would result in duplicate IDs.
   </p>
</section>

<!-- - - - - - - - - - - - - - - - - - - - - -->
<section id=html-prop>
   <h4>DNA Property</h4>
   <p>
      Properties are enabled or disabled based on the value of the specified data field.
   </p>
   <figure>
      <figcaption>Example HTML</figcaption>
      <pre><code class=language-html>
         &lt;input type=checkbox data-prop-checked=~~isGift~~&gt; Gift Wrap&lt;br&gt;
         &lt;input type=checkbox data-prop-checked=~~isExpress~~&gt; Overnight
      </code></pre>
   </figure>
   <p>
      Valid data attributes for setting a property are <code>data-prop-checked</code>,
      <code>data-prop-selected</code>, and <code>data-prop-deleted</code>.
   </p>
</section>

<!-- - - - - - - - - - - - - - - - - - - - - -->
<section id=html-class>
   <h4>DNA Class</h4>
   <p>
      A class can be set just like other attributes.
   </p>
   <figure>
      <figcaption>Example HTML</figcaption>
      <pre><code class=language-html>
         &lt;div class=~~type~~&gt;
      </code></pre>
   </figure>
   <p>
      However, the regular attribute technique above wipes out existing classes on the element, so
      it is generally better to the use the <code>data-class</code> attribute to add a class.
   </p>
   <figure>
      <figcaption>Example HTML (simple data field name)</figcaption>
      <pre><code class=language-html>
         &lt;div data-class=~~type~~&gt;
      </code></pre>
   </figure>
   <p>
      If there are two or three names (comma separated), the first name is still the name of the
      data field but the data field is evaluated for <a href="#real-truth">"real" truth</a>.
   </p>
   <figure>
      <figcaption>Example HTML (three names)</figcaption>
      <pre><code class=language-html>
         &lt;div data-class=~~onSale,red-highlight,no-highlight~~&gt;
      </code></pre>
   </figure>
   <p>
      For true, the second name is added to the element as a class name while the class
      for third name, if provided, is removed.&nbsp;  For false, the third name, if provided, is
      added to the element as a class name while the class for second name is removed.
   </p>
   <table>
      <thead>
         <tr><th>Name</th><th>Use</th><th>Description</th></tr>
      </thead>
      <tbody>
         <tr><td>1st</td><td>Data field name</td><td>Data for class name or truthiness</td></tr>
         <tr><td>2nd</td><td>Class name (for true)</td><td>Class added to element for true</td></tr>
         <tr><td>3rd</td><td>Class name (for false)</td><td>Class added to element for false</td></tr>
      </tbody>
   </table>
   <p>
      Continuing with the example of the <code>onSale</code> data field, the code below would
      result in the first book containing an element with the class <code>red-highlight</code> and
      the second book containing an element with the class <code>no-highlight</code>.
   </p>
   <figure>
      <figcaption>Example</figcaption>
      <pre><code class=language-html>
         &lt;div id=book class=dna-template&gt;
            &lt;span data-class=~~onSale,red-highlight,no-highlight~~&gt;
               ~~title~~
            &lt;/span&gt;
         &lt;/div&gt;
         &lt;script&gt;
            var books = [
               { title: 'The DOM',     onSale: true },
               { title: 'Styling CSS', onSale: false }
               ];
            dna.clone('book', books);
         &lt;/script&gt;
      </code></pre>
   </figure>
   <!-- Start: Result  -->
   <div class=down-arrow></div>
   <figure>
      <figcaption>Resulting HTML</figcaption>
      <pre><code class=language-html>
         &lt;div class=book&gt;
            &lt;span class=red-highlight&gt;The DOM&lt;/span&gt;
         &lt;/div&gt;
         &lt;div class=book&gt;
            &lt;span class=no-highlight&gt;Styling CSS&lt;/span&gt;
         &lt;/div&gt;
      </code></pre>
   </figure>
   <!-- End: Result  -->


</section>

<!-- - - - - - - - - - - - - - - - - - - - - -->
<section id=html-example>
   <h4>Ensemble</h4>
   <p>
      Below is an example of a completed template.
   </p>
   <figure>
      <figcaption>Example HTML</figcaption>
      <pre><code class=language-html>
         &lt;div id=book class=dna-template&gt;
            &lt;div id=~~code~~&gt;
               Title: &lt;span&gt;~~title~~&lt;/span&gt;
            &lt;/div&gt;
            &lt;div data-class=~~type~~&gt;
               Author: &lt;span&gt;~~author~~&lt;/span&gt;
            &lt;/div&gt;
         &lt;/div&gt;
      </code></pre>
   </figure>
</section>

<!--*********************************************************************************************-->
<h3 id=api>JavaScript API &mdash; Calling DNA</h3>
<h5>API Overview</h5>
<ol>
   <li><b>dna.clone</b>(name, data, options)</li>
   <li><b>dna.cloneSubTemplate</b>(holderClone, arrayField, data, options)</li>
   <li><b>dna.load</b>(name, url, options)</li>
   <li><b>dna.getModel</b>(nameOrClone)</li>
   <li><b>dna.empty</b>(name, options)</li>
   <li><b>dna.mutate</b>(clone, data, options)</li>
   <li><b>dna.mutateAll</b>(name)</li>
   <li><b>dna.destroy</b>(clone, options)</li>
   <li><b>dna.getClone</b>(elem)</li>
   <li><b>dna.getClones</b>(name)</li>
   <li><b>dna.bye</b>(elemOrEventOrIndex)</li>
   <li><b>dna.registerInitializer</b>(callback, options)</li>
   <li><b>dna.clearInitializers</b>()</li>
   <li><b>dna.info</b>()</li>
</ol>

<!-- - - - - - - - - - - - - - - - - - - - - -->
<!--  dna.clone()  -->
<section id=api-clone>
   <h4>dna.clone(name, data [, options])</h4>
   <p class=api-description>
      Generates a copy of the template and populates the fields, attributes, and
      classes from the supplied data.
   </p>
   <div class=api-parameters>
      Parameters:
      <ul>
         <li>
            <label><b>name</b> (String):</label>
            Name of the template to clone.
         </li>
         <li>
            <label><b>data</b> (Object, String, Number, Boolean, or Array) <i>[optional]</i>:</label>
            Data to be used for populating the template fields when cloning the
            template.&nbsp;  If <code>data</code> is an array, the length of the
            array is the number of clones to be generated.
         </li>
         <li>
            <!--#include file="~parameters.fhtml"-->
         </li>
      </ul>
   </div>
   <figure>
      <figcaption>Example JavaScript</figcaption>
      <pre><code class=language-javascript>
         dna.clone('book', { title: 'The DOM', author: 'Bo' });
      </code></pre>
   </figure>
</section>

<!-- - - - - - - - - - - - - - - - - - - - - -->
<!--  dna.cloneSubTemplate()  -->
<section id=api-clone-sub-template>
   <h4>dna.cloneSubTemplate(holderClone, arrayField, data[, options])</h4>
   <p class=api-description>
      Clones a sub-template to append onto an array loop.
   </p>
   <div class=api-parameters>
      Parameters:
      <ul>
         <li>
            <label><b>holderClone</b> (jQuery Element):</label>
            Clone element that contains the sub-template array loop.
         </li>
         <li>
            <label><b>arrayField</b> (String):</label>
            Name of data field for an array loop.
         </li>
         <li>
            <label><b>data</b> (Object, String, Number, Boolean, or Array):</label>
            Data to be used for populating the sub-template fields when cloning the
            sub-template.&nbsp;  If data is an array, the length of the array is the number of
            clones to be generated.
         </li>
         <li>
            <label><b>options</b> (Object) <i>[optional]</i>:</label>
            <ul>
               <li>
                  <label><b>fade</b> (Boolean) &mdash;</label>
                  Use the jQuery <code>.fadeOut()</code> effect (default: <b>false</b>).
               </li>
            </ul>
         </li>
      </ul>
   </div>
   <figure>
      <figcaption>Example JavaScript</figcaption>
      <pre><code class=language-javascript>
         var book = { title: 'Interwebz', chapters: ['ARPANET', 'TCP/IP'] };
         var clone = dna.clone('book', book);
         dna.cloneSubTemplate(clone, 'chapters', 'CERN');  //append chapter
      </code></pre>
   </figure>
   <p>
      See the <a href="#loop-sub-templates">Sub-templates (array loops)</a> section for details.
   </p>
</section>

<!-- - - - - - - - - - - - - - - - - - - - - -->
<!--  dna.load()  -->
<section id=api-load>
   <h4>dna.load(name, url [, options])</h4>
   <p class=api-description>
      Makes a GET request to the url and then generates a copy of the template
      and populates the fields, attributes, and classes from the JSON response.
   </p>
   <div class=api-parameters>
      Parameters:
      <ul>
         <li>
            <label><b>name</b> (String):</label>
            Name of the template to clone.
         </li>
         <li>
            <label><b>url</b> (String):</label>
            URL of a REST call that returns data as JSON text
            (<code>Content-Type: application/json</code>).&nbsp;  See the
            <code>data</code> field for the <code>dna.clone()</code> method.
         </li>
         <li>
            <!--#include file="~parameters.fhtml"-->
         </li>
      </ul>
   </div>
   <figure>
      <figcaption>Example JavaScript</figcaption>
      <pre><code class=language-javascript>
         dna.load('book', 'http://dnajs.org/rest/book/3');
      </code></pre>
   </figure>
   <p>
      The <code>dna.load()</code> method will not create a clone if the REST
      call returns an <code>error</code> field equal to <code>true</code>.
   </p>
   <p>
      For <a href="http://dnajs.org/rest/book/7" class=external-site>example</a>:<br>
      <code class=indent>{ "error": true, "message": "Resource not found" }</code>
   </p>
</section>

<!-- - - - - - - - - - - - - - - - - - - - - -->
<!--  dna.getModel()  -->
<section id=api-get-model>
   <h4>dna.getModel(clone)</h4>
   <p class=api-description>
      Returns the underlying data of the clone.
   </p>
   <div class=api-parameters>
      Parameters:
      <ul>
         <li>
            <label><b>clone</b> (jQuery Element):</label>
            An element returned from a call to the <code>dna.clone()</code> method.
         </li>
      </ul>
   </div>
   <figure>
      <figcaption>Example JavaScript</figcaption>
      <pre><code class=language-javascript>
         var book = { title: 'The DOM', author: 'Bo' };
         var clone = dna.clone('book', book);
         dna.getModel(clone).title = 'The DOM II';
         dna.mutate(clone);  //updates ui (DOM element) with new title
      </code></pre>
   </figure>
</section>

<!-- - - - - - - - - - - - - - - - - - - - - -->
<!--  dna.empty()  -->
<section id=api-empty>
   <h4>dna.empty(name[, options])</h4>
   <p class=api-description>
      Deletes all clones generated from the template.
   </p>
   <div class=api-parameters>
      Parameters:
      <ul>
         <li>
            <label><b>name</b> (String):</label>
            Name of the template to clone.
         </li>
         <li>
            <label><b>options</b> (Object) <i>[optional]</i>:</label>
            <ul>
               <li>
                  <label><b>fade</b> (Boolean) &mdash;</label>
                  Use the jQuery <code>.fadeOut()</code> effect (default: <b>false</b>).
               </li>
            </ul>
         </li>
      </ul>
   </div>
   <figure>
      <figcaption>Example JavaScript</figcaption>
      <pre><code class=language-javascript>
         dna.empty('book', { fade: true });
      </code></pre>
   </figure>
   <p>
      The <code>dna.empty()</code> method does not delete sub-clones
      generated from nested templates.
   </p>
</section>

<!-- - - - - - - - - - - - - - - - - - - - - -->
<!--  dna.mutate()  -->
<section id=api-mutate>
   <h4>dna.mutate(clone[, data[, options]])</h4>
   <p class=api-description>
      Updates an existing clone with new data.
   </p>
   <div class=api-parameters>
      Parameters:
      <ul>
         <li>
            <label><b>clone</b> (jQuery Element):</label>
            An element returned from a call to the <code>dna.clone()</code> method.
         </li>
         <li>
            <label><b>data</b> (Object) <i>[optional]</i>:</label>
            Object with fields to be used in updating the clone.&nbsp;
            Only fields contained in the <code>data</code> paramater are
            modified.
         </li>
         <li>
            <label><b>options</b> (Object) <i>[optional]</i>:</label>
            <ul>
               <li>
                  <label><b>html</b> (Boolean) &mdash;</label>
                  Inject data as HTML rather than unformatted text (default: <b>false</b>).
               </li>
            </ul>
         </li>
      </ul>
   </div>
   <figure>
      <figcaption>Example JavaScript</figcaption>
      <pre><code class=language-javascript>
         var book = { title: 'The DOM', author: 'Bo' };
         var clone = dna.clone('book', book);
         dna.getModel(clone).title = 'The DOM II';
         dna.mutate(clone);  //updates ui (DOM element) with new title
      </code></pre>
   </figure>
</section>

<!-- - - - - - - - - - - - - - - - - - - - - -->
<!--  dna.mutateAll()  -->
<section id=api-mutate-all>
   <h4>dna.mutateAll(name)</h4>
   <p class=api-description>
      Updates all the clones of the specified template.
   </p>
   <div class=api-parameters>
      Parameters:
      <ul>
         <li>
            <label><b>name</b> (String):</label>
            Template name.
         </li>
      </ul>
   </div>
   <figure>
      <figcaption>Example JavaScript</figcaption>
      <pre><code class=language-javascript>
         var clone1 = dna.clone('book', { title: 'The DOM' });
         var clone2 = dna.clone('book', { title: 'Styling CSS' });
         dna.getModel(clone1).title = 'The DOM II';    //modified title
         dna.getModel(clone2).title = 'Styling CSS3';  //modified title
         dna.mutateAll('book');  //updates ui with new titles
      </code></pre>
   </figure>
</section>

<!-- - - - - - - - - - - - - - - - - - - - - -->
<!--  dna.destroy()  -->
<section id=api-destroy>
   <h4>dna.destroy(clone[, options])</h4>
   <p class=api-description>
      Removes an existing clone from the DOM.
   </p>
   <div class=api-parameters>
      Parameters:
      <ul>
         <li>
            <label><b>clone</b> (jQuery Element):</label>
            An element returned from a call to the <code>dna.clone()</code> method.
         </li>
         <li>
            <label><b>options</b> (Object) <i>[optional]</i>:</label>
            <ul>
               <li>
                  <label><b>fade</b> (Boolean) &mdash;</label>
                  Use the jQuery <code>.fadeOut()</code> effect (default: <b>false</b>).
               </li>
            </ul>
         </li>
      </ul>
   </div>
   <figure>
      <figcaption>Example JavaScript</figcaption>
      <pre><code class=language-javascript>
         var clone = dna.clone('book', book);
         dna.destroy(clone, { fade: true });
      </code></pre>
   </figure>
   <p>
      <b>Note:</b> If the only option being set is <code>fade</code> to <code>true</code>, it is
      simpler to user the <a href="#api-bye"><code>dna.by()</code></a> convenience method.
   </p>
</section>

<!-- - - - - - - - - - - - - - - - - - - - - -->
<!--  dna.getClone()  -->
<section id=api-get-clone>
   <h4>dna.getClone(elem)</h4>
   <p class=api-description>
      Returns the clone that contains the specified element.
   </p>
   <div class=api-parameters>
      Parameters:
      <ul>
         <li>
            <label><b>elem</b> (jQuery Element):</label>
            Any element within the clone or even the clone itself.
         </li>
      </ul>
   </div>
   <figure>
      <figcaption>Example</figcaption>
      <pre><code class=language-html>
         &lt;div id=book class=dna-template&gt;
            &lt;p&gt;~~title~~&lt;/p&gt;
            &lt;button data-click=setFavorite&gt;I Like&lt;/button&gt;
         &lt;/div&gt;
         &lt;script&gt;
            function setFavorite(buttonElem) {
               dna.getClone(buttonElem).addClass('favorite');
               }
            dna.clone('book', { title: 'Go JavaScript!' });
         &lt;/script&gt;
      </code></pre>
   </figure>
   <!-- Start: Result  -->
   <div class=down-arrow></div>
   <figure>
      <figcaption>Resulting HTML (before clicking button)</figcaption>
      <pre><code class=language-html>
         &lt;div class=book&gt;
            &lt;p&gt;Go JavaScript!&lt;/p&gt;
            &lt;button&gt;I Like&lt;/button&gt;
         &lt;/div&gt;
      </code></pre>
   </figure>
   <figure>
      <figcaption>Resulting HTML (after clicking button)</figcaption>
      <pre><code class=language-html>
         &lt;div class="book favorite"&gt;
            &lt;p&gt;Go JavaScript!&lt;/p&gt;
            &lt;button&gt;I Like&lt;/button&gt;
         &lt;/div&gt;
      </code></pre>
   </figure>
   <!-- End: Result  -->
</section>

<!-- - - - - - - - - - - - - - - - - - - - - -->
<!--  dna.getClones()  -->
<section id=api-get-clones>
   <h4>dna.getClones(name)</h4>
   <p class=api-description>
      Returns an array of all the existing clones for the given template.
   </p>
   <div class=api-parameters>
      Parameters:
      <ul>
         <li>
            <label><b>name</b> (String):</label>
            Template name.
         </li>
      </ul>
   </div>
   <figure>
      <figcaption>Example JavaScript</figcaption>
      <pre><code class=language-javascript>
         dna.getClones('book');
      </code></pre>
   </figure>
</section>

<!-- - - - - - - - - - - - - - - - - - - - - -->
<!--  dna.bye()  -->
<section id=api-bye>
   <h4>dna.bye(elemOrEventOrIndex)</h4>
   <p class=api-description>
      Performs a <a href="#ui-slide-fade">sliding fade out effect</a> on the clone and then
      removes the element.&nbsp;  The function can be called: 1) as an event callback, 2) from a
      jQuery loop, or 3) directly as function with the clone as the parameter.
   </p>
   <div class=api-parameters>
      Parameters:
      <ul>
         <li>
            <label><b>elemOrEventOrIndex</b> (jQuery Object, Event, or Index):</label>
            Reference to a jQuery element.
         </li>
      </ul>
   </div>
   <figure>
      <figcaption>Example 1: event callback</figcaption>
      <pre><code class=language-html>
         &lt;div id=book class=dna-template&gt;
            &lt;p&gt;~~title~~&lt;/p&gt;
            &lt;button data-click=dna.bye&gt;Delete Book&lt;/button&gt;
         &lt;/div&gt;
      </code></pre>
   </figure>
   <figure>
      <figcaption>Example 2: jQuery loop</figcaption>
      <pre><code class=language-javascript>
         $('.book.favorite').each(dna.bye);  //deletes all favorite books
      </code></pre>
   </figure>
   <figure>
      <figcaption>Example 3: direct function call</figcaption>
      <pre><code class=language-javascript>
         var clone = dna.clone('book', { title: 'The DOM' });
         dna.bye(clone);  //deletes 'The DOM'
      </code></pre>
   </figure>
</section>

<!-- - - - - - - - - - - - - - - - - - - - - -->
<!--  dna.registerInitializer()  -->
<section id=api-register-initializer>
   <h4>dna.registerInitializer(callback[, options])</h4>
   <p class=api-description>
       Adds a callback function to the list of initializers that are run on all DOM elements.
   </p>
   <div class=api-parameters>
      Parameters:
      <ul>
         <li>
            <label><b>callback</b> (String or Function):</label>
            String name of a function or an actual function.
         </li>
         <li>
            <label><b>options</b> (Object) <i>[optional]</i>:</label>
            <ul>
               <li>
                  <label><b>selector</b> (String) &mdash;</label>
                  CSS selector (default: none).
               </li>
            </ul>
         </li>
      </ul>
   </div>
   <figure>
      <figcaption>Example JavaScript</figcaption>
      <pre><code class=language-javascript>
         // Line below replaces:  $('.comment-form').validate();
         dna.registerInitializer('validate', { selector: '.comment-form' });
      </code></pre>
   </figure>
   <p>
      See the <a href="#event-initializer">Initializers</a> section for details.
   </p>
</section>

<!-- - - - - - - - - - - - - - - - - - - - - -->
<!--  dna.clearInitializers()  -->
<section id=api-clear-initializers>
   <h4>dna.clearInitializers()</h4>
   <p class=api-description>
      Deletes all initializers.
   </p>
   <figure>
      <figcaption>Example JavaScript</figcaption>
      <pre><code class=language-javascript>
         dna.registerInitializer('bootstrapSwitch', '.switch');
         dna.clearInitializers();  //undoes previous line
      </code></pre>
   </figure>
   <p>
      See the <a href="#event-initializer">Initializers</a> section for details.
   </p>
</section>

<!-- - - - - - - - - - - - - - - - - - - - - -->
<!--  dna.info()  -->
<section id=api-info>
   <h4>dna.info()</h4>
   <p class=api-description>
      Logs information to the browser console.
   </p>
   <figure>
      <figcaption>Example JavaScript</figcaption>
      <pre><code class=language-javascript>
         dna.info();
      </code></pre>
   </figure>
   <p>
      The <code>dna.info()</code> method is intended to be called manually
      from the console to see which templates have been detected and
      compiled.
   </p>
</section>

<!--*********************************************************************************************-->
<h3 id=loop>Looping</h3>

<!-- - - - - - - - - - - - - - - - - - - - - -->
<section id=loop-templates>
   <h4>Template Array Loops</h4>
   <p>
      Pass in a single object to create one clone.&nbsp;  Pass in an array of
      objects to create multiple clones.
   </p>
   <figure>
      <figcaption>Example HTML</figcaption>
      <pre><code class=language-html>
         &lt;div id=book class=dna-template&gt;~~title~~&lt;/div&gt;
      </code></pre>
   </figure>
   <figure>
      <figcaption>Example JavaScript</figcaption>
      <pre><code class=language-javascript>
         var books = [{ title: 'The DOM' }, { title: 'Interwebz' }];
         dna.clone('book', books);
      </code></pre>
   </figure>
   <!-- Start: Result  -->
   <div class=down-arrow></div>
   <figure>
      <figcaption>Resulting HTML</figcaption>
      <pre><code class=language-html>
         &lt;div class=book&gt;The DOM&lt;/div&gt;
         &lt;div class=book&gt;Interwebz&lt;/div&gt;
      </code></pre>
   </figure>
   <!-- End: Result  -->
</section>

<!-- - - - - - - - - - - - - - - - - - - - - -->
<section id=loop-sub-templates>
   <h4>Sub-templates (array loops)</h4>
   <p>
      Use the <code>data-array</code> attribute to create a sub-template
      for data fields that are arrays.&nbsp;  Each element of the array will
      generate a clone of the sub-template.
   </p>
   <figure>
      <figcaption>Example HTML</figcaption>
      <pre><code class=language-html>
         &lt;div id=book class=dna-template&gt;
            Book: &lt;span&gt;~~title~~&lt;/span&gt; by
            &lt;span&gt;
               &lt;span data-array=~~authors~~&gt;~~[value]~~&lt;/span&gt;
            &lt;/span&gt;
            &lt;div&gt;
               &lt;div data-array=~~chapters~~&gt;
                  Chapter: &lt;span&gt;~~header~~&lt;/span&gt;
               &lt;/div&gt;
            &lt;/div&gt;
         &lt;/div&gt;
      </code></pre>
   </figure>
   <figure>
      <figcaption>Example JavaScript</figcaption>
      <pre><code class=language-javascript>
         var book = {
            title:    'Interwebz',
            authors:  ['Ed', 'Jake', 'Abby'],
            chapters: [header: 'ARPANET', header: 'TCP/IP']
            };
         dna.clone('book', book);
      </code></pre>
   </figure>
   <!-- Start: Result  -->
   <div class=down-arrow></div>
   <figure>
      <figcaption>Resulting HTML</figcaption>
      <pre><code class=language-html>
         &lt;div class=book&gt;
            Book: &lt;span&gt;Interwebz&lt;/span&gt; by
            &lt;span&gt;
               &lt;span&gt;Ed&lt;/span&gt;
               &lt;span&gt;Jake&lt;/span&gt;
               &lt;span&gt;Abby&lt;/span&gt;
            &lt;/span&gt;
            &lt;div&gt;
               &lt;div&gt;
                  Chapter: &lt;span&gt;ARPANET&lt;/span&gt;
               &lt;/div&gt;
               &lt;div&gt;
                  Chapter: &lt;span&gt;TCP/IP&lt;/span&gt;
               &lt;/div&gt;
            &lt;/div&gt;
         &lt;/div&gt;
      </code></pre>
   </figure>
   <!-- End: Result  -->
</section>

<!-- - - - - - - - - - - - - - - - - - - - - -->
<section id=loop-primitives>
   <h4>Arrays of Primitives (strings, numbers, booleans)</h4>
   <p>
      The special field <code>[value]</code> tells the template to use simple values
      from an array of primitives.&nbsp;  The special field <code>[count]</code>
      is the value's index number in the array plus 1.
   </p>
   <figure>
      <figcaption>Example HTML</figcaption>
      <pre><code class=language-html>
         &lt;div id=book class=dna-template&gt;
            &lt;span&gt;~~[count]~~&lt;span&gt;. &lt;span&gt;~~[value]~~&lt;span&gt;
         &lt;/div&gt;
      </code></pre>
   </figure>
   <figure>
      <figcaption>Example JavaScript</figcaption>
      <pre><code class=language-javascript>
         var books = ['The DOM', 'Interwebz'];
         dna.clone('book', books);
      </code></pre>
   </figure>
   <!-- Start: Result  -->
   <div class=down-arrow></div>
   <figure>
      <figcaption>Resulting HTML</figcaption>
      <pre><code class=language-html>
         &lt;div class=book&gt;
            &lt;span&gt;1&lt;/span&gt;. &lt;span&gt;The DOM&lt;/span&gt;
         &lt;/div&gt;
         &lt;div class=book&gt;
            &lt;span&gt;2&lt;/span&gt;. &lt;span&gt;Interwebz&lt;/span&gt;
         &lt;/div&gt;
      </code></pre>
   </figure>
   <!-- End: Result  -->
</section>

<!-- - - - - - - - - - - - - - - - - - - - - -->
<section id=loop-separators>
   <h4>Separators</h4>
   <p>
      Classes <code>dna-separator</code> and <code>dna-separator-last</code>...
   </p>
   <figure>
      <figcaption>Example</figcaption>
      <pre><code class=language-html>
         &lt;b&gt;Authors:&lt;/b&gt;
         &lt;span id=author class=dna-template&gt;
            &lt;span&gt;~~name~~&lt;/span&gt;&lt;span class=dna-separator&gt;, &lt;/span&gt;
         &lt;/span&gt;
         &lt;script&gt;
            var authors = [{ name: 'Ed' }, { name: 'Bo'}, { name: 'Abby' }];
            dna.clone('author', authors);
         &lt;/script&gt;
      </code></pre>
   </figure>
   <!-- Start: Result  -->
   <div class=down-arrow></div>
   <figure class=hljs-enhance>
      <figcaption>Result</figcaption>
      <div>
         <b>Authors:</b> Ed, Jake, Abby
      </div>
   </figure>
   <!-- End: Result  -->
</section>

<!--*********************************************************************************************-->
<h3 id=event>Events and Callbacks</h3>

<!-- - - - - - - - - - - - - - - - - - - - - -->
<section id=event-element-setup>
   <h4>Element Setup</h4>
   <p>
      Use the <code>data-setup</code> attribute to declare a callback function for a
      template.&nbsp;  Cloning the template triggers the callback for each new clone, and the clone
      element is passed into the function.
   </p>
   <p>
      In the example below, each new book clone will be passed into the <code>app.blink()</code>
      function, causing the element to fade in a couple times as if it's blinking at the user.
   </p>
   <figure>
      <figcaption>Example HTML</figcaption>
      <pre><code class=language-html>
         &lt;div id=book class=dna-template data-setup=app.blink&gt;
            &lt;span&gt;~~title~~&lt;span&gt;
         &lt;/div&gt;
      </code></pre>
   </figure>
   <figure>
      <figcaption>Example JavaScript</figcaption>
      <pre><code class=language-javascript>
         var app = {
            blink: function(elem) {
               elem.fadeOut().fadeIn().fadeOut().fadeIn();
               }
            };
      </code></pre>
   </figure>
   <p>
      The callback can also be used outside of a template to initialize an element on page load,
      but you must add the <code>dna-setup</code> class.
   </p>
   <figure>
      <figcaption>Example HTML</figcaption>
      <pre><code class=language-html>
         &lt;div class=dna-setup data-setup=app.blink&gt;
            &lt;span&gt;This text will blink on page load!&lt;span&gt;
         &lt;/div&gt;
      </code></pre>
   </figure>
   <p>
      <b>Note:</b> Element setup callbacks perform a similar function as
      <a href="#event-initializer">initializers</a>, but element setup is specific and an
      initializer is general.&nbsp;  For example, element setup is appropriate for initiating a
      REST call to retrieve additional data for the element while an initializer is appropriate for
      configuring all elements that have tooltips.
   </p>
</section>

<!-- - - - - - - - - - - - - - - - - - - - - -->
<section id=event-user>
   <h4>Click, Change, and Key Events</h4>
   <p>
      Event bindings in dna.js are done with data attributes directly on DOM elements that need
      to trigger callbacks.&nbsp;  The value assigned to the attribute is the name of the
      function to be called when the event occurs.&nbsp;  The jQuery element which triggered the
      event is passed into the callback function as the first parameter, and the event object is
      passed in as the second parameter.
   </p>
   Element attributes for supported events:
   <ol>
      <li><code>data-click</code></li>
      <li><code>data-change</code></li>
      <li><code>data-key-up</code></li>
      <li><code>data-key-down</code></li>
      <li><code>data-key-press</code></li>
      <li><code>data-enter-key</code></li>
   </ol>
   <figure>
      <figcaption>Example</figcaption>
      <pre><code class=language-html>
         &lt;p&gt;Click:  &lt;button data-click=showMsg     value=1&gt;1&lt;/button&gt;&lt;/p&gt;
         &lt;p&gt;Change: &lt;input  data-change=showMsg    value=2&gt;&lt;/p&gt;
         &lt;p&gt;Up:     &lt;input  data-key-up=showMsg    value=3&gt;&lt;/p&gt;
         &lt;p&gt;Down:   &lt;input  data-key-down=showMsg  value=4&gt;&lt;/p&gt;
         &lt;p&gt;Press:  &lt;input  data-key-press=showMsg value=5&gt;&lt;/p&gt;
         &lt;p&gt;Submit: &lt;input  data-enter-key=showMsg value=6&gt;&lt;/p&gt;
         &lt;p id=message&gt;&lt;/p&gt;
         &lt;script&gt;
            function showMsg(elem, event) {
               var msg = 'Value: "' + elem.val() + '", Event: ' + event.type;
               $('#message').text(msg).stop().hide().fadeIn();
               }
         &lt;/script&gt;
      </code></pre>
   </figure>
   <!-- Start: Result  -->
   <div class=down-arrow></div>
   <figure class=hljs-enhance>
      <figcaption>Result (interactive)</figcaption>
      <div>
         <p>Click:  <button data-click=showMsg     value=1>1</button></p>
         <p>Change: <input  data-change=showMsg    value=2></p>
         <p>Up:     <input  data-key-up=showMsg    value=3></p>
         <p>Down:   <input  data-key-down=showMsg  value=4></p>
         <p>Press:  <input  data-key-press=showMsg value=5></p>
         <p>Submit: <input  data-enter-key=showMsg value=6></p>
         <p id=message></p>
         <script>
            function showMsg(elem, event) {
               var msg = 'Value: "' + elem.val() + '", Event: ' + event.type;
               $('#message').text(msg).stop().hide().fadeIn();
               }
         </script>
      </div>
   </figure>
   <!-- End: Result  -->
</section>

<!-- - - - - - - - - - - - - - - - - - - - - -->
<section id=event-initializer>
   <h4>Initializers</h4>
   <p>
      On a static webpage where all the HTML is sent in a single HTTP response, any needed element
      initialization can be done one time just after page load.&nbsp;  For example, the line
      <code>$('.tooltip').qtip();</code> could be used to setup all tooltips.&nbsp;  Cloning with
      dna.js creates elements and adds them to the DOM after the page is loaded, and those new
      elements also need to be initialized.
   </p>
   <p>
      When you register your initializer functions, dna.js ensures DOM elements are setup even if
      the elements are added to the DOM via cloning after the page is loaded.
   </p>
   <table>
      <thead>
         <tr><th>Selector</th><th>Example</th><th>Initializer</th></tr>
      </thead>
      <tbody>
         <tr>
            <td>Yes</td>
            <td><code>{ selector: '.tooltip' }</code></td>
            <td>Immediately run on selected elements (example: <code>$('.tooltip')</code>) and then on new clones</td>
         </tr>
         <tr>
            <td>No</td>
            <td>n/a</td>
            <td>Only run on new clones</td>
         </tr>
      </tbody>
   </table>
   <p>
      If the registered initializer function is a method on the jQuery element, dna.js will execute
      the method on the element and use the <code>params</code> option for the parameters.&nbsp;
      Otherwise, the element is passed into the function as the first parameter with the
      <code>params</code> supplied as additional parameters.
   </p>
   <figure>
      <figcaption>Example JavaScript</figcaption>
      <pre><code class=language-javascript>
         var app = {
            highlight: function(elem) {
               elem.css('background-color', 'gold');
               },
            setup: function() {
               dna.registerInitializer(app.highlight);  //highlight clones
               dna.registerInitializer('qtip', { selector: '.tooltip' });
               dna.registerInitializer('css',  //roomy always gets space
                  { selector: '.roomy', params: ['padding', '10px'] });
               // Line above replaces:  $('.roomy').css('padding', '10px');
               }
            };
         $(app.setup);
      </code></pre>
   </figure>
   <p>
      <b>Note 1:</b> Initializers perform a similar function as
      <a href="#event-element-setup">element setup callbacks</a> (<code>data-setup</code>), but
      an initializer is general and element setup is specific.&nbsp;  For example, an initializer
      is appropriate for configuring all elements that have tooltips while element setup is
      appropriate for making a REST call to retrieve additional data for the element.
   </p>
   <p>
      <b>Note 2:</b> In the event that your application dynamically adds elements to the DOM
      without using dna.js, it may be necessary to explicitly run the initializers by passing the
      root element of new elements into: <code>dna.events.runInitializers(root);</code>
   </p>
</section>

<!-- - - - - - - - - - - - - - - - - - - - - -->
<section id=event-callback-option>
   <h4>Callback Options</h4>
   <p>
      Once cloning is completed, the <code>callback</code> function is
      executed and passed the clone element plus the data that was injected
      into the clone.
   </p>
   <figure>
      <figcaption>Example HTML</figcaption>
      <pre><code class=language-html>
         &lt;div id=book class=dna-template&gt;
            ~~title~~
         &lt;/div&gt;
      </code></pre>
   </figure>
   <figure>
      <figcaption>Example JavaScript</figcaption>
      <pre><code class=language-javascript>
         function applyBkgnd(elem, data) {
            elem.css('background-image', data.cover);
            };
         var options = { fade: true, callback: applyBkgnd };
         var book = { title: 'Taskmaster', cover: 'url(cover.png)' };
         dna.clone('book', book, options);
      </code></pre>
   </figure>
   <!-- Start: Result  -->
   <div class=down-arrow></div>
   <figure>
      <figcaption>Resulting HTML</figcaption>
      <pre><code class=language-html>
         &lt;div class=book style="background-image: url(cover.png);"&gt;
            Taskmaster
         &lt;/div&gt;
      </code></pre>
   </figure>
   <!-- End: Result  -->
   <p>
      <b>Note:</b> It is almost always cleaner and easier to declare an
      <a href="#event-element-setup">element setup callback</a> (<code>data-setup</code>) than
      to pass in a function with the <code>callback</code> option.
   </p>
</section>

<!--*********************************************************************************************-->
<h3 id=structure>Structures and Conditional Logic</h3>

<!-- - - - - - - - - - - - - - - - - - - - - -->
<section id=structure-nested-object>
   <h4>Object Dot Notation (nested objects)</h4>
   <p>
      Use JavaScript object dot notation in field names to reference data fields
      of nested objects.
   </p>
   <figure>
      <figcaption>Example HTML</figcaption>
      <pre><code class=language-html>
         &lt;div id=book class=dna-template&gt;
            First Name: &lt;span&gt;~~author.first~~&lt;/span&gt;
         &lt;/div&gt;
      </code></pre>
   </figure>
   <figure>
      <figcaption>Example JavaScript</figcaption>
      <pre><code class=language-javascript>
         var book = {
            title: 'The DOM',
            author: { first: 'Bo', last: 'Smith' }
            };
         dna.clone('book', book);
      </code></pre>
   </figure>
   <!-- Start: Result  -->
   <div class=down-arrow></div>
   <figure>
      <figcaption>Resulting HTML</figcaption>
      <pre><code class=language-html>
         &lt;div class=book&gt;
            First Name: &lt;span&gt;Bo&lt;/span&gt;
         &lt;/div&gt;
      </code></pre>
   </figure>
   <!-- End: Result  -->
</section>

<!-- - - - - - - - - - - - - - - - - - - - - -->
<section id=structure-thimblerig>
   <h4>Thimblerig (conditional hide and seek logic)</h4>
   <p>
      Instead of writing JavaScript to show and hide DOM elements, use an attribute to declare
      whether the element should be shown or hidden.&nbsp;  dna.js supports four
      conditionals &mdash; two for the existence of a field and two for the
      <a href="#real-truth">"real" truth</a> of a field.
   </p>
   <table>
      <thead>
         <tr><th>Attribute</th><th>Value</th><th>Logic</th></tr>
      </thead>
      <tbody>
         <tr><td><code>data-require</code></td><td>DNA Field</td><td>Show element only if specified field has a value</td></tr>
         <tr><td><code>data-missing</code></td><td>DNA Field</td><td>Show element only if specified field has no value</td></tr>
         <tr><td><code>data-truthy</code></td><td>DNA Field</td><td>Show element only if specified field means true*</td></tr>
         <tr><td><code>data-falsey</code></td><td>DNA Field</td><td>Show element only if specified field means false*</td></tr>
      </tbody>
   </table>
   <figure>
      <figcaption>Example HTML</figcaption>
      <pre><code class=language-html>
         &lt;div id=book class=dna-template&gt;
            &lt;span data-require=~~title~~&gt;~~title~~&lt;/span&gt;
            &lt;span data-missing=~~title~~&gt;[not found]&lt;/span&gt;
         &lt;/div&gt;
      </code></pre>
   </figure>
   <figure>
      <figcaption>Example JavaScript</figcaption>
      <pre><code class=language-javascript>
         var books = [
            { author: 'Bo', title: 'The DOM' },
            { author: 'Jan' }
            ];
         dna.clone('book', books);
      </code></pre>
   </figure>
   <!-- Start: Result  -->
   <div class=down-arrow></div>
   <figure>
      <figcaption>Resulting HTML</figcaption>
      <pre><code class=language-html>
         &lt;div class=book&gt;
            &lt;span&gt;The DOM&lt;/span&gt;
         &lt;/div&gt;
         &lt;div class=book&gt;
            &lt;span&gt;[not found]&lt;/span&gt;
         &lt;/div&gt;
      </code></pre>
   </figure>
   <!-- End: Result  -->
   <h5 id=real-truth>Real Truth</h5>
   <p>
      dna.js evaluates if a data field is <code>true</code> or <code>false</code> based on rules
      designed to match the boolean meaning of data as it would be stored in a database or how the
      data would be interpreted in a business sense.&nbsp; For example, the string
      <code>'FALSE'</code> is evaluated to the boolean <code>false</code> when determining its
      "real" truth.
   </p>
   <table>
      <thead>
         <tr><th>Evaluate</th><th>Examples</th></tr>
      </thead>
      <tbody>
         <tr>
            <td>Truthy</td>
            <td>
               <code>true</code>, <code>1</code>, <code>'1'</code>, <code>'t'</code>,
               <code>'T'</code>, <code>'TRue'</code>, <code>'77'</code>, <code>77</code>,
               <code>[5]</code>, <code>{}</code>, <code>'Colbert'</code>
            </td>
         </tr>
         <tr>
            <td>Falsey</td>
            <td>
               <code>false</code>, <code>0</code>, <code>'0'</code>,
               <code>'f'</code>, <code>'F'</code>, <code>'faLSE'</code>, <code>''</code>,
               <code>[]</code>, <code>null</code>, <code>undefined</code>, <code>NaN</code>
            </td>
         </tr>
      </tbody>
   </table>
   <h5 id=transient-field>Transient Fields</h5>
   <p>
      Compact and maintainable code can be written by basing conditionals on transient data fields.
   </p>
   <figure>
      <figcaption>Example HTML</figcaption>
      <pre><code class=language-html>
         &lt;p class=warning data-truthy=~~overdue~~&gt;Invoice past due!&lt;/p&gt;
      </code></pre>
   </figure>
   <figure>
      <figcaption>Example JavaScript</figcaption>
      <pre><code class=language-javascript>
         var invoice = { amount: 125.00, due: 'April 3, 2015' },
         invoice.overdue = new Date(invoice.due).getTime() &lt; Date.now();
         dna.clone('invoice', invoice);
      </code></pre>
   </figure>
   <p>
      In the above example, the <code>invoice</code> data object has an <code>amount</code> field
      and a <code>due</code> field.&nbsp;  The past due warning is displayed if the boolean
      field <code>overdue</code>, which is calculated on the fly, is set to <code>true</code>.
   </p>
   <p>
      <b>Note:</b> Similar to thimblerigs, <a href="#loop-separators">separators</a> are used to
      hide and show a delimiter between clones, such as a comma to separate names of authors.
   </p>
</section>

<!-- - - - - - - - - - - - - - - - - - - - - -->
<section id=structure-nested-template>
   <h4>Nested Templates</h4>
   <p>
      For additional flexibility, templates can be nestes and then explicitly
      cloned with calls to <code>dna.clone()</code>.&nbsp;  A nested template
      belongs to a holder template, and the specific holder clone must be
      passed into <code>dna.clone()</code> when cloning a nested template.
   </p>
   <p>
      View source for <a href="test-cases.html">test cases #07</a>.
   </p>
   <p>
      In most cases, a simple <a href="#loop-sub-templates">sub-template array loop</a>
      is the better solution.
   </p>

</section>

<!--*********************************************************************************************-->
<h3 id=util>Utilities</h3>
<p>
   The utility functions built into dna.js are available to be called directly in the event that
   they might be generally useful.
</p>
<h5>Utility Functions Overview</h5>
<ol>
   <li><b>dna.ui.deleteElem</b>(elemOrEventOrIndex)</li>
   <li>
      <b>dna.ui.slideFadeDelete</b>(elem)<br>
      <b>dna.ui.slideFadeIn</b>(elem, callback)<br>
      <b>dna.ui.slideFadeOut</b>(elem, callback)<br>
      <b>dna.ui.slideFadeToggle</b>(elem, callback)
   </li>
   <li><b>dna.ui.slidingFlasher</b>(elem, callback)</li>
   <li><b>dna.ui.toElem</b>(elemOrEventOrIndex, that)</li>
   <li><b>dna.util.apply</b>(func, params)</li>
   <li><b>dna.util.realTruth</b>(value)</li>
   <li><b>dna.util.toCamel</b>(codeStr)</li>
   <li><b>dna.util.toCode</b>(camelCaseStr)</li>
   <li><b>dna.util.value</b>(data, field)</li>
</ol>

<!-- - - - - - - - - - - - - - - - - - - - - -->
<!--  dna.ui.deleteElem()  -->
<section id=ui-delete-elem>
   <h4>dna.ui.deleteElem(elemOrEventOrIndex)</h4>
   <p class=api-description>
      A flexible function for removing a jQuery element.
   </p>
   <div class=api-parameters>
      Parameters:
      <ul>
         <li>
            <label><b>elemOrEventOrIndex</b> (jQuery Object, Event, or Index):</label>
            Reference to a jQuery element.
         </li>
      </ul>
   </div>
   <figure>
      <figcaption>Example JavaScript</figcaption>
      <pre><code class=language-javascript>
         $('.box').last().fadeOut(dna.ui.deleteElem);  //removes last box
         dna.ui.deleteElem(('.box').first());  //removes first box
      </code></pre>
   </figure>
</section>

<!-- - - - - - - - - - - - - - - - - - - - - -->
<!--  dna.ui.slideFade()  -->
<section id=ui-slide-fade>
   <h4>dna.ui.slideFadeDelete(elem)</h4>
   <h4>dna.ui.slideFadeIn(elem[, callback])</h4>
   <h4>dna.ui.slideFadeOut(elem[, callback])</h4>
   <h4>dna.ui.slideFadeToggle(elem[, callback])</h4>
   <p class=api-description>
      Various functions to apply the smooth slide plus fade effect.
   </p>
   <div class=api-parameters>
      Parameters:
      <ul>
         <li>
            <label><b>elem</b> (jQuery Object):</label>
            Element to be faded in or faded out.
         </li>
         <li>
            <label><b>callback</b> (String or Function):</label>
            String name of a function or an actual function.
         </li>
      </ul>
   </div>
   <figure>
      <figcaption>Example JavaScript</figcaption>
      <pre><code class=language-javascript>
         dna.ui.slideFadeDelete($('.box').last());  //removes the last box
         dna.ui.slideFadeIn($('.box').first());  //shows the box
      </code></pre>
   </figure>
</section>

<!-- - - - - - - - - - - - - - - - - - - - - -->
<!--  dna.ui.slidingFlasher()  -->
<section id=ui-sliding-flasher>
   <h4>dna.ui.slidingFlasher(elem[, callback])</h4>
   <p class=api-description>
      Uses a smooth slide down plus fade in effect on an element if it is hidden or a smooth fade in
      flash if the element is already visible &mdash;  intended to display an error message.
   </p>
   <div class=api-parameters>
      Parameters:
      <ul>
         <li>
            <label><b>elem</b> (jQuery Object):</label>
            Element to be displayed.
         </li>
         <li>
            <label><b>callback</b> (String or Function):</label>
            String name of a function or an actual function.
         </li>
      </ul>
   </div>
   <figure>
      <figcaption>Example JavaScript</figcaption>
      <pre><code class=language-javascript>
         var elem = $('#msg').text('Error!');
         dna.ui.slidingFlasher(elem);  //slide down
         ...
         dna.ui.slidingFlasher(elem);  //pulse
      </code></pre>
   </figure>
</section>

<!-- - - - - - - - - - - - - - - - - - - - - -->
<!--  dna.ui.toElem()  -->
<section id=ui-to-elem>
   <h4>dna.ui.toElem(elemOrEventOrIndex, that)</h4>
   <p class=api-description>
      A flexible way to get the jQuery element whether it is passed in directly, the target of an
      event, or comes from the jQuery context.
   </p>
   <div class=api-parameters>
      Parameters:
      <ul>
         <li>
            <label><b>elemOrEventOrIndex</b> (jQuery Object, Event, or Index):</label>
            Reference to a jQuery element.
         </li>
         <li>
            <label><b>that</b> (this):</label>
            <code>this</code>.
         </li>
      </ul>
   </div>
   <figure>
      <figcaption>Example JavaScript</figcaption>
      <pre><code class=language-javascript>
         function logFadeDone(e) {
            console.log('Element faded out:', dna.ui.toElem(e, this));
            }
         $('.box').last().fadeOut(logFadeDone);
      </code></pre>
   </figure>
</section>

<!-- - - - - - - - - - - - - - - - - - - - - -->
<!--  dna.util.apply()  -->
<section id=util-apply>
   <h4>dna.util.apply(func, params)</h4>
   <p class=api-description>
      Calls a function passing in the provided parameters.
   </p>
   <div class=api-parameters>
      Parameters:
      <ul>
         <li>
            <label><b>func</b> (String or Function):</label>
            String name of a function or an actual function.
         </li>
         <li>
            <label><b>params</b> (anything or Array):</label>
            A single value to pass into the function or an array of values where each element in
            the array is a parameter passed into the function.
         </li>
      </ul>
   </div>
   <figure>
      <figcaption>Example JavaScript</figcaption>
      <pre><code class=language-javascript>
         dna.util.apply('app.cart.buy', 7);      //app.cart.buy(7);
         dna.util.apply(Math.max, [7, 21, -3]);  //21;
         dna.util.apply('fadeIn', $('h1'));      //$('h1').fadeIn();
         dna.util.apply('css', [$('h1'), { color: 'red' }]);
         dna.util.apply('css', [$('h1'), 'color', 'gold']);
      </code></pre>
   </figure>
</section>

<!-- - - - - - - - - - - - - - - - - - - - - -->
<!--  dna.util.realTruth()  -->
<section id=util-real-truth>
   <h4>dna.util.realTruth(value)</h4>
   <p class=api-description>
      Return the <a href="#real-truth">"real" truth</a> of a value.&nbsp;  Whereas JavaScript
      truthy an falsy is more about existence, the "real" truth is for evaluating boolean data as
      it is stored in databases or transmitted in REST calls.
   </p>
   <div class=api-parameters>
      Parameters:
      <ul>
         <li>
            <label><b>value</b> (anything):</label>
            Whatever you want to interrogate.
         </li>
      </ul>
   </div>
   <figure>
      <figcaption>Example JavaScript</figcaption>
      <pre><code class=language-javascript>
         dna.util.realTruth('F');  //false
      </code></pre>
   </figure>
</section>

<!--  dna.util.toCamel()  -->
<!-- - - - - - - - - - - - - - - - - - - - - -->
<section id=util-to-camel>
   <h4>dna.util.toCamel(codeStr)</h4>
   <p class=api-description>
      Converts a code made of lowercase letters and dashes into camel case string.
   </p>
   <div class=api-parameters>
      Parameters:
      <ul>
         <li>
            <label><b>codeStr</b> (String):</label>
            A string made of lowercase letters and dashes.
         </li>
      </ul>
   </div>
   <figure>
      <figcaption>Example JavaScript</figcaption>
      <pre><code class=language-javascript>
         dna.util.toCamel('ready-set-go');  //'readySetGo'
      </code></pre>
   </figure>
</section>

<!-- - - - - - - - - - - - - - - - - - - - - -->
<!--  dna.util.toCode()  -->
<section id=util-to-code>
   <h4>dna.util.toCode(camelCaseStr)</h4>
   <p class=api-description>
      Converts a camel case string to a code made of only lowercase letters and dashes.
   </p>
   <div class=api-parameters>
      Parameters:
      <ul>
         <li>
            <label><b>camelCaseStr</b> (String):</label>
            A camel case string.
         </li>
      </ul>
   </div>
   <figure>
      <figcaption>Example JavaScript</figcaption>
      <pre><code class=language-javascript>
            dna.util.toCode('readySetGo');  //'ready-set-go'
      </code></pre>
   </figure>
</section>

<!-- - - - - - - - - - - - - - - - - - - - - -->
<!--  dna.util.value()  -->
<section id=util-value>
   <h4>dna.util.value(data, field)</h4>
   <p class=api-description>
      Retrieve a value from a field within an object.
   </p>
   <div class=api-parameters>
      Parameters:
      <ul>
         <li>
            <label><b>data</b> (Object):</label>
            Object with fields containing data.
         </li>
         <li>
            <label><b>field</b> (String):</label>
            Name of a field within the data object (supports object dot notation for nested
            objects).
         </li>
      </ul>
   </div>
   <figure>
      <figcaption>Example JavaScript</figcaption>
      <pre><code class=language-javascript>
         var data = { cart: { items: 7 } };
         var count = dna.util.value(data, 'cart.items');  //7
      </code></pre>
   </figure>
</section>

<!--*********************************************************************************************-->
<h3 id=reserved>Index of DNA Classes and Data Attributes</h3>

<!-- - - - - - - - - - - - - - - - - - - - - -->
<section id=reserved-classes>
   <h4>DNA Classes</h4>
   <ol>
      <li><a href="#loop-separators">    <code>dna-separator</code></a>:      Mark element as a separator for multiple clones</li>
      <li><a href="#loop-separators">    <code>dna-separator-last</code></a>: Mark element as the last separator</li>
      <li><a href="#event-element-setup"><code>dna-setup</code></a>:          Enable setup callback outside of a template</li>
      <li><a href="#html-template">      <code>dna-template</code></a>:       Mark an element as a template</li>
   </ol>
</section>

<!-- - - - - - - - - - - - - - - - - - - - - -->
<section id=reserved-attributes>
   <h4>DNA Data Attributes</h4>
   <ol>
      <li><a href="#loop-sub-templates">  <code>data-array</code></a>:         Mark an element as a sub-template array loop</li>
      <li><a href="#html-attr">           <code>data-attr-{NAME}</code></a>:   Set value of an element attribute</li>
      <li><a href="#event-user">          <code>data-change</code></a>:        Execute callback on change event</li>
      <li><a href="#html-class">          <code>data-class</code></a>:         Add a class to the element</li>
      <li><a href="#event-user">          <code>data-click</code></a>:         Execute callback on click event</li>
      <li><a href="#event-user">          <code>data-enter-key</code></a>:     Execute callback on enter key event</li>
      <li><a href="#structure-thimblerig"><code>data-falsey</code></a>:        Show element only if field evaluates to false</li>
      <li><a href="#event-user">          <code>data-key-down</code></a>:      Execute callback on key down event</li>
      <li><a href="#event-user">          <code>data-key-press</code></a>:     Execute callback on key press event</li>
      <li><a href="#event-user">          <code>data-key-up</code></a>:        Execute callback on key up event</li>
      <li><a href="#structure-thimblerig"><code>data-missing</code></a>:       Show element only if field us not defined</li>
      <li><a href="#html-prop">           <code>data-prop-checked</code></a>:  Enable or disable "checked" property</li>
      <li><a href="#html-prop">           <code>data-prop-disabled</code></a>: Enable or disable "disabled" property</li>
      <li><a href="#html-prop">           <code>data-prop-selected</code></a>: Enable or disable "selected" property</li>
      <li><a href="#structure-thimblerig"><code>data-required</code></a>:      Show element only if field exists</li>
      <li><a href="#event-element-setup"> <code>data-setup</code></a>:         Execute callback when clone is created</li>
      <li><a href="#structure-thimblerig"><code>data-truthy</code></a>:        Show element only if field evaluates to true</li>
   </ol>
</section>

</article>

<!--#include file="~end.fhtml"-->
