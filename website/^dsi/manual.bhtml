<!--#set var="title" value="Documentation" -->
<!--#include file="~begin.fhtml" -->

<p>
   See the <a href=".#example">Bookstore Example</a> for an overview of using dna.js
   Template Cloner.&nbsp;  For richer examples, view the HTML source of the
   <a href="test-cases.html">Test Cases</a>.
</p>
<div class=toc>
   <header>Contents:</header>
   <ol>
      <li><a href="#terms-requirements">Terms and System Requirements</a></li>
      <li><a href="#setup">Setup</a>
         <ol>
            <li><a href="#setup-css">CSS</a></li>
            <li><a href="#setup-js">JavaScript Libraries</a></li>
         </ol>
      </li>
      <li><a href="#html">HTML &mdash; Classes and Attributes</a>
         <ol>
            <li><a href="#html-template">DNA Template</a></li>
            <li><a href="#html-field">DNA Field</a></li>
            <li><a href="#html-attr">DNA Attribute</a></li>
            <li><a href="#html-class">DNA Class</a></li>
            <li><a href="#html-example">Ensemble</a></li>
         </ol>
      </li>
      <li><a href="#api">JavaScript API</a>
         <ol>
            <li><a href="#api-clone">dna.clone()</a></li>
            <li><a href="#api-clone-sub-template">dna.cloneSubTemplate()</a></li>
            <li><a href="#api-load">dna.load()</a></li>
            <li><a href="#api-get-model">dna.getModel()</a></li>
            <li><a href="#api-empty">dna.empty()</a></li>
            <li><a href="#api-mutate">dna.mutate()</a></li>
            <li><a href="#api-mutate-all">dna.mutateAll()</a></li>
            <li><a href="#api-destroy">dna.destroy()</a></li>
            <li><a href="#api-get-clone">dna.getClone()</a></li>
            <li><a href="#api-get-clones">dna.getClones()</a></li>
            <li><a href="#api-bye">dna.bye()</a></li>
            <li><a href="#api-register-initializer">dna.registerInitializer()</a></li>
            <li><a href="#api-clear-initializers">dna.clearInitializers()</a></li>
            <li><a href="#api-info">dna.info()</li>
         </ol>
      </li>
      <li><a href="#loop">Looping</a>
         <ol>
            <li><a href="#loop-templates">Template Array Loops</a></li>
            <li><a href="#loop-sub-templates">Sub-template Array Loops</a></li>
            <li><a href="#loop-primitives">Arrays of Primitives (strings, numbers, booleans)</a></li>
         </ol>
      </li>
      <li><a href="#event">Events and Callbacks</a>
         <ol>
            <li><a href="#event-init-callback">Initialization Callback</a></li>
            <li><a href="#event-user">Click, Change, and Key Events</a></li>
            <li><a href="#event-initializers">Initializers</a></li>
            <li><a href="#event-callback-option">Callback Option</a></li>
         </ol>
      </li>
      <li><a href="#structure">Structures and Conditional Logic</a>
         <ol>
            <li><a href="#structure-nested-object">Object Dot Notation (nested objects)</a></li>
            <li><a href="#structure-thimblerig">Thimblerig (conditional hide and seek logic)</a></li>
            <li><a href="#structure-nested-template">Nested Templates</a></li>
         </ol>
      </li>
      <li><a href="#util">Utilities</a></li>
   </ol>
</div>

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
<h3 id=terms-requirements>Terms and System Requirements</h3>
<h4 id=terms>Terms</h4>
<dl>
   <dt>DNA Template:</dt>
   <dd>
      An HTML element whose clones will be injected with data from JavaScript
      objects.&nbsp;  The element has the <code>dna-template</code> class.
   </dd>
</dl>
<dl>
   <dt>DNA Field:</dt>
   <dd>
      DNA fields identify where in the template data is to be injected
      during the cloning process (example: <code>~~author~~</code>).
   </dd>
</dl>
<dl>
   <dt>DNA Strand:</dt>
   <dd>
      A pair of double tildes (<code>~~</code>) used to surround a field name (a.k.a.
      DNA base pair).&nbsp;
      Mustache notation with curly braces (<code>{{</code> and <code>}}</code>)
      is also supported.
   </dd>
</dl>
<dl>
   <dt>DNA Clone:</dt>
   <dd>
      A DOM element that is made by copying a DNA Template.  The template name
      is added as each clone's class name.
   </dd>
</dl>
<dl>
   <dt>Junk DNA:</dt>
   <dd>Not permitted in this project.</dd>
</dl>
<br>
<h4 id=requirements>System Requirements</h4>
<dl>
   <dt>Web Browsers:</dt>
   <dd>
      dna.js supports Chrome, Internet Exploder, Firefox, Opera, and Safari.
   </dd>
</dl>
<dl>
   <dt>Versions:</dt>
   <dd>
      dna.js requires jQuery 1.8 or above, and it has the same system requirements
      and <a href="http://jquery.com/browser-support/" class=external-site>browser
      support</a> as the version of jQuery you use.
   </dd>
</dl>

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
<h3 id=setup>Setup</h3>

<section id=setup-css>
   <h4>CSS</h4>
   <p>
      Add the following line to your website's CSS so the DNA templates are not
      displayed in the browser.
   </p>
   <div class=code-caption>CSS to hide templates</div>
<pre><code class=language-css>
.dna-template { display: none; }
</code></pre>
   <p>
      Note that the first call to <code>dna.clone()</code> detaches the template
      from the DOM, so the above line of CSS is technically not required if you
      always call <code>dna.clone()</code> before the web page is displayed.
   </p>
</section>

<section id=setup-js>
   <h4>JavaScript Libraries</h4>
   <p>
      Download the
      <code><a href="https://raw.github.com/dnajs/dna.js/current/dna.min.js" class=external-site>dna.min.js</a></code>
      file (or the
      <code><a href="https://raw.github.com/dnajs/dna.js/current/dna.js" class=external-site>dna.js</a></code>
      uncompressed version) and include it in your website.&nbsp;
      <!--#echo var="name" --> requires jQuery.
   </p>
   <p>
      Example of loading jQuery, dna.js, and your JavaScript web application:
   </p>
   <div class=code-caption>Load libraries</div>
<pre><code class=language-markup>
...
&lt;script src=&quot;js/jquery.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;js/dna.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;js/your-app.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
   <p>
      For experimentation and development, you can <a href="dna.js">link</a> directly to:<br>
         <code class=indent>http://dnajs.org/dna.js</code>
   </p>
</section>

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
<h3 id=html>HTML &mdash; Classes and Attributes</h3>

<section id=html-template>
   <h4>DNA Template</h4>
   <p>
      The <code>dna-template</code> class signifies a template.&nbsp;  The <code>id</code>
      attribute of the element is the template name.
   </p>
   <div class=code-caption>Example HTML</div>
<pre><code class=language-markup>
&lt;div id=book class=dna_template&gt;
</code></pre>
</section>

<section id=html-field>
   <h4>DNA Field</h4>
   <p>
      Enclose data field names in double tildes.&nbsp;  Each field takes up the entire
      text part of the HTML node.
   </p>
   <div class=code-caption>Example HTML</div>
<pre><code class=language-markup>
&lt;span&gt;~~title~~&lt;/span&gt;
</code></pre>
   <p>
      The field name referes to the field in the data object.&nbsp;  If the data
      is a simple literal (string, number, or boolean) rather than an object,
      use the special name <code>[value]</code> for the field.
   </p>
   <div class=code-caption>Example HTML</div>
<pre><code class=language-markup>
&lt;span&gt;~~[value]~~&lt;/span&gt;
</code></pre>
</section>

<section id=html-attr>
   <h4>DNA Attribute</h4>
   <p>
      Attributes are set using the same notation as fields.
   </p>
   <div class=code-caption>Example HTML</div>
<pre><code class=language-markup>
&lt;div id=__code__&gt;
</code></pre>
   <p>
      Attributes can also be set by prefixing <code>data-dna-attr-</code> to the attribute
      name.
   </p>
   <div class=code-caption>Example HTML</div>
<pre><code class=language-markup>
&lt;img data-dna-attr-src=__url__ alt="Profile avatar"&gt;
</code></pre>
   <p>
      The prefixing technique enables setting the <code>src</code> attribute for an
      <code>img</code> node without causing the browser to fetch the image until the
      <code>src</code> attribute is actually set.&nbsp;  This technique can also be used to set the
      <code>id</code> when the regular technique would result in duplicate IDs.
   </p>
</section>

<section id=html-class>
   <h4>DNA Class</h4>
   <p>
      A class can be set just like other attributes.
   </p>
   <div class=code-caption>Example HTML</div>
<pre><code class=language-markup>
&lt;div class=__type__&gt;
</code></pre>
   <p>
      However, the regular attribute technique above wipes out existing classes
      on the element, so it is generally better to the use the
      <code>data-dna-class</code> technique, which adds classes and accepts a
      commas separated list.
   </p>
   <div class=code-caption>Example HTML</div>
<pre><code class=language-markup>
&lt;div data-dna-class=__type__&gt;
</code></pre>
</section>

<section id=html-example>
   <h4>Ensemble</h4>
   <p>
      Below is an example of a completed template.
   </p>
   <div class=code-caption>Example HTML</div>
<pre><code class=language-markup>
&lt;div id=book class=dna_template&gt;
   &lt;div id=__code__&gt;
      Title: &lt;span&gt;~~title~~&lt;/span&gt;
   &lt;/div&gt;
   &lt;div data-dna-class=__type__&gt;
      Author: &lt;span&gt;~~author~~&lt;/span&gt;
   &lt;/div&gt;
&lt;/div&gt;
</code></pre>
</section>

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
<h3 id=api>JavaScript API &mdash; Calling DNA</h3>
<h5>API Overview</h5>
<ol>
   <li><b>dna.clone</b>(name, data, options)</li>
   <li><b>dna.cloneSubTemplate</b>(holderClone, arrayField, data, options)</li>
   <li><b>dna.load</b>(name, url, options)</li>
   <li><b>dna.getModel</b>(nameOrClone)</li>
   <li><b>dna.empty</b>(name, options)</li>
   <li><b>dna.mutate</b>(clone, data, options)</li>
   <li><b>dna.mutateAll</b>(name)</li>
   <li><b>dna.destroy</b>(clone, options)</li>
   <li><b>dna.getClone</b>(elem)</li>
   <li><b>dna.getClones</b>(name)</li>
   <li><b>dna.bye</b>(elemOrEventOrIndex)</li>
   <li><b>dna.registerInitializer</b>(func, options)</li>
   <li><b>dna.clearInitializers</b>()</li>
   <li><b>dna.info</b>()</li>
</ol>

<!--  dna.clone()  -->
<section id=api-clone>
   <h4>dna.clone(name, data [, options])</h4>
   <div class=api-description>
      Generates a copy of the template and populates the fields, attributes, and
      classes from the supplied data.
   </div>
   <div class=api-parameters>
      Parameters:
      <ul>
         <li>
            <label><b>name</b> (String):</label>
            Name of the template to clone.
         </li>
         <li>
            <label><b>data</b> (Object, String, Number, Boolean, or Array) <i>[optional]</i>:</label>
            Data to be used for populating the template fields when cloning the
            template.&nbsp;  If <code>data</code> is an array, the length of the
            array is the number of clones to be generated.
         </li>
         <li>
            <!--#include file="~parameters.fhtml" -->
         </li>
      </ul>
   </div>
   <div class=code-caption>Example JavaScript</div>
<pre><code class=language-javascript>
dna.clone('book', { title: 'The DOM', author: 'Bo' });
</code></pre>
   <div class=api-details>
   </div>
</section>

<!--  dna.cloneSubTemplate()  -->
<section id=api-clone-sub-template>
   <h4>dna.cloneSubTemplate(holderClone, arrayField, data, options)</h4>
</section>

<!--  dna.load()  -->
<section id=api-load>
   <h4>dna.load(name, url [, options])</h4>
   <div class=api-description>
      Makes a GET request to the url and then generates a copy of the template
      and populates the fields, attributes, and classes from the JSON response.
   </div>
   <div class=api-parameters>
      Parameters:
      <ul>
         <li>
            <label><b>name</b> (String):</label>
            Name of the template to clone.
         </li>
         <li>
            <label><b>url</b> (String):</label>
            URL of a REST call that returns data as JSON text
            (<code>Content-Type: application/json</code>).&nbsp;  See the
            <code>data</code> field for the <code>dna.clone()</code> method.
         </li>
         <li>
            <!--#include file="~parameters.fhtml" -->
         </li>
      </ul>
   </div>
   <div class=code-caption>Example JavaScript</div>
<pre><code class=language-javascript>
dna.load('book', 'http://dnajs.org/rest/book/3');
</code></pre>
   <div class=api-details>
      <p>
         The <code>dna.load()</code> method will not create a clone if the REST
         call returns an <code>error</code> field equal to <code>true</code>.
      </p>
      <p>
         For <a href="http://dnajs.org/rest/book/7" class=external-site>example</a>:<br>
         <code class=indent>{ "error": true, "message": "Resource not found" }</code>
      </p>
   </div>
</section>

<!--  dna.getModel()  -->
<section id=api-get-model>
   <h4>dna.getModel(clone)</h4>
   <div class=api-description>
      Returns the underlying data of the clone.
   </div>
   <div class=api-parameters>
      Parameters:
      <ul>
         <li>
            <label><b>clone</b> (jQuery Element):</label>
            An element returned from a call to the <code>dna.clone()</code> method.
         </li>
      </ul>
   </div>
   <div class=code-caption>Example JavaScript</div>
<pre><code class=language-javascript>
var book = { title: 'The DOM', author: 'Bo' };
var clone = dna.clone('book', book);
dna.getModel(clone).title = 'The DOM II';
dna.mutate(clone);
</code></pre>
   <div class=api-details>
   </div>
</section>

<!--  dna.empty()  -->
<section id=api-empty>
   <h4>dna.empty(name[, options])</h4>
   <div class=api-description>
      Deletes all clones generated from the template.
   </div>
   <div class=api-parameters>
      Parameters:
      <ul>
         <li>
            <label><b>name</b> (String):</label>
            Name of the template to clone.
         </li>
         <li>
            <label><b>options</b> (Object) <i>[optional]</i>:</label>
            <ul>
               <li>
                  <label><b>fade</b> (Boolean) &mdash;</label>
                  Use the jQuery <code>.fadeOut()</code> effect (default: <b>false</b>).
               </li>
            </ul>
         </li>
      </ul>
   </div>
   <div class=code-caption>Example JavaScript</div>
<pre><code class=language-javascript>
dna.empty('book', { fade: true });
</code></pre>
   <div class=api-details>
      <p>
         The <code>dna.empty()</code> method does not delete sub-clones
         generated from nested templates.
      </p>
   </div>
</section>

<!--  dna.mutate()  -->
<section id=api-mutate>
   <h4>dna.mutate(clone[, data[, options]])</h4>
   <div class=api-description>
      Updates an existing clone with new data.
   </div>
   <div class=api-parameters>
      Parameters:
      <ul>
         <li>
            <label><b>clone</b> (jQuery Element):</label>
            An element returned from a call to the <code>dna.clone()</code> method.
         </li>
         <li>
            <label><b>data</b> (Object):</label>
            Object with fields to be used in updating the clone.&nbsp;
            Only fields contained in the <code>data</code> paramater are
            modified.
         </li>
      </ul>
   </div>
   <div class=code-caption>Example JavaScript</div>
<pre><code class=language-javascript>
var book = { title: 'The DOM', author: 'Bo' };
var clone = dna.clone('book', book);
dna.mutate(clone, { title: 'The DOM 2' });
</code></pre>
   <div class=api-details>
   </div>
</section>

<!--  dna.mutateAll()  -->
<section id=api-mutate-all>
   <h4>dna.mutateAll(name)</h4>
</section>

<!--  dna.destroy()  -->
<section id=api-destroy>
   <h4>dna.destroy(clone[, options])</h4>
   <div class=api-description>
      Removes an existing clone from the DOM.
   </div>
   <div class=api-parameters>
      Parameters:
      <ul>
         <li>
            <label><b>clone</b> (jQuery Element):</label>
            An element returned from a call to the <code>dna.clone()</code> method.
         </li>
         <li>
            <label><b>options</b> (Object) <i>[optional]</i>:</label>
            <ul>
               <li>
                  <label><b>fade</b> (Boolean) &mdash;</label>
                  Use the jQuery <code>.fadeOut()</code> effect (default: <b>false</b>).
               </li>
            </ul>
         </li>
      </ul>
   </div>
   <div class=code-caption>Example JavaScript</div>
<pre><code class=language-javascript>
var clone = dna.clone('book', book);
dna.destroy(clone, { fade: true });
</code></pre>
   <div class=api-details>
   </div>
</section>

<!--  dna.getClone()  -->
<section id=api-get-clone>
   <h4>dna.getClone(elem)</h4>
</section>

<!--  dna.getClones()  -->
<section id=api-get-clones>
   <h4>dna.getClones(name)</h4>
</section>

<!--  dna.bye()  -->
<section id=api-bye>
   <h4>dna.bye(elemOrEventOrIndex)</h4>
...
</section>

<!--  dna.registerInitializer()  -->
<section id=api-register-initializer>
   <h4>dna.registerInitializer(func, options)</h4>
</section>

<!--  dna.clearInitializers()  -->
<section id=api-clear-initializers>
   <h4>dna.clearInitializers()</h4>
</section>

<!--  dna.info()  -->
<section id=api-info>
   <h4>dna.info()</h4>
   <div class=api-description>
      Logs information to the browser console.
   </div>
   <div class=code-caption>Example JavaScript</div>
<pre><code class=language-javascript>
dna.info();
</code></pre>
   <div class=api-details>
      <p>
         The <code>dna.info()</code> method is intended to be called manually
         from the console to see which templates have been detected and
         compiled.
      </p>
   </div>
</section>

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
<h3 id=loop>Looping</h3>

<section id=loop-templates>
   <h4>Template Array Loops</h4>
   <p>
      Pass in a single object to create one clone.&nbsp;  Pass in an array of
      objects to create multiple clones.
   </p>
   <div class=code-caption>Example HTML</div>
<pre><code class=language-markup>
&lt;div id=book class=dna_template&gt;~~title~~&lt;/div&gt;
</code></pre>
   <div class=code-caption>Example JavaScript</div>
<pre><code class=language-javascript>
var books = [{ title: 'The DOM' }, { title: 'Interwebz' }];
dna.clone('book', books);
</code></pre>
   <!-- Start: Result  -->
   <div class=down-arrow></div>
   <div class=code-caption>Resulting HTML</div>
<pre><code class=language-markup>
&lt;div class=book&gt;The DOM&lt;/div&gt;
&lt;div class=book&gt;Interwebz&lt;/div&gt;
</code></pre>
   <!-- End: Result  -->
</section>

<section id=loop-sub-templates>
   <h4>Sub-templates (array loops)</h4>
   <p>
      Use the <code>data-dna-array</code> attribute to create a sub-template
      for data fields that are arrays.&nbsp;  Each element of the array will
      generate a clone of the sub-template.
   </p>
   <div class=code-caption>Example HTML</div>
<pre><code class=language-markup>
&lt;div id=book class=dna_template&gt;
   Book: &lt;span&gt;~~title~~&lt;/span&gt; by
   &lt;span&gt;
      &lt;span data-dna-array=__authors__&gt;~~[value]~~&lt;/span&gt;
   &lt;/span&gt;
   &lt;div&gt;
      &lt;div data-dna-array=__chapters__&gt;
         Chapter: &lt;span&gt;~~header~~&lt;/span&gt;
      &lt;/div&gt;
   &lt;/div&gt;
&lt;/div&gt;
</code></pre>
   <div class=code-caption>Example JavaScript</div>
<pre><code class=language-javascript>
var books = [
   { title: 'Interwebz', authors: ['Ed', 'Jake', 'Abby'],
      chapters: [header: 'ARPANET', header: 'TCP/IP'] }
   ];
dna.clone('book', books);
</code></pre>
   <!-- Start: Result  -->
   <div class=down-arrow></div>
   <div class=code-caption>Resulting HTML</div>
<pre><code class=language-markup>
&lt;div class=book&gt;
   Book: &lt;span&gt;Interwebz&lt;/span&gt; by
   &lt;span&gt;
      &lt;span&gt;Ed&lt;/span&gt;
      &lt;span&gt;Jake&lt;/span&gt;
      &lt;span&gt;Abby&lt;/span&gt;
   &lt;/span&gt;
   &lt;div&gt;
      &lt;div&gt;
         Chapter: &lt;span&gt;ARPANET&lt;/span&gt;
      &lt;/div&gt;
      &lt;div&gt;
         Chapter: &lt;span&gt;TCP/IP&lt;/span&gt;
      &lt;/div&gt;
   &lt;/div&gt;
&lt;/div&gt;
</code></pre>
   <!-- End: Result  -->
</section>

<section id=loop-primitives>
   <h4>Arrays of Primitives (strings, numbers, booleans)</h4>
   <p>
      The special field <code>[value]</code> tells the template to use simple values
      from an array of primitives.&nbsp;  The special field <code>[count]</code>
      is the value's index number in the array plus 1.
   </p>
   <div class=code-caption>Example HTML</div>
<pre><code class=language-markup>
&lt;div id=book class=dna_template&gt;
   &lt;span&gt;~~[count]~~&lt;span&gt;. &lt;span&gt;~~[value]~~&lt;span&gt;
&lt;/div&gt;
</code></pre>
   <div class=code-caption>Example JavaScript</div>
<pre><code class=language-javascript>
var books = ['The DOM', 'Interwebz'];
dna.clone('book', books);
</code></pre>
   <!-- Start: Result  -->
   <div class=down-arrow></div>
   <div class=code-caption>Resulting HTML</div>
<pre><code class=language-markup>
&lt;div class=book&gt;
   &lt;span&gt;1&lt;/span&gt;. &lt;span&gt;The DOM&lt;/span&gt;
&lt;/div&gt;
&lt;div class=book&gt;
   &lt;span&gt;2&lt;/span&gt;. &lt;span&gt;Interwebz&lt;/span&gt;
&lt;/div&gt;
</code></pre>
   <!-- End: Result  -->
</section>

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
<h3 id=event>Events and Callbacks</h3>

<section id=event-element-init>
   <h4>Element Initialization</h4>
   <p>
      ...
   </p>
</section>

<section id=event-user>
   <h4>Click, Change, and Key Events</h4>
   <p>
      Event bindings in dna.js are done with data attributes directly on DOM elements that need
      to trigger callbacks.&nbsp;  The value assigned to the attribute is the name of the
      function to be called when the event occurs.&nbsp;  The jQuery element which triggered the
      event is passed into the callback function as the first parameter, and the event object is
      passed in as the second parameter.
   </p>
   <p>
      Element attributes for supported events:<code>
      <ol>
         <li>data-dna-click</li>
         <li>data-dna-change</li>
         <li>data-dna-key-up</li>
         <li>data-dna-key-down</li>
         <li>data-dna-key-press</li>
         <li>data-dna-enter-key</li>
      </ol></code>
   </p>
   <div class=code-caption>Example</div>
<pre><code class=language-markup>
Click:  &lt;button data-dna-click=showMsg     value=1&gt;1&lt;/button&gt;&lt;br&gt;
Change: &lt;input  data-dna-change=showMsg    value=2&gt;&lt;br&gt;
Up:     &lt;input  data-dna-key-up=showMsg    value=3&gt;&lt;br&gt;
Down:   &lt;input  data-dna-key-down=showMsg  value=4&gt;&lt;br&gt;
Press:  &lt;input  data-dna-key-press=showMsg value=5&gt;&lt;br&gt;
Submit: &lt;input  data-dna-enter-key=showMsg value=6&gt;&lt;br&gt;
&lt;p id=message&gt;&lt;/p&gt;
&lt;script&gt;
   function showMsg(elem, event) {
      var msg = 'Value: "' + elem.val() + '", Event: ' + event.type;
      $('#message').text(msg).hide().fadeIn();
      }
&lt;/script&gt;
</code></pre>
   <!-- Start: Result  -->
   <div class=down-arrow></div>
   <div class=code-caption>Result (interactive)</div>
   <div class=code-body>
      Click:  <button data-dna-click=showMsg     value=1>1</button><br>
      Change: <input  data-dna-change=showMsg    value=2><br>
      Up:     <input  data-dna-key-up=showMsg    value=3><br>
      Down:   <input  data-dna-key-down=showMsg  value=4><br>
      Press:  <input  data-dna-key-press=showMsg value=5><br>
      Submit: <input  data-dna-enter-key=showMsg value=6><br>
      <p id=message></p>
      <script>
         function showMsg(elem, event) {
            var msg = 'Value: "' + elem.val() + '", Event: ' + event.type;
            $('#message').text(msg).hide().fadeIn();
            }
      </script>
   </div>
   <!-- End: Result  -->
</section>

<section id=event-initializers>
   <h4>Initializers</h4>
   <p>
      ...
   </p>
</section>

<section id=event-callback-option>
   <h4>Callbacks Functions</h4>
   <p>
      Once the cloning is completed, the <code>callback</code> function is
      executed and passed the clone element plus the data that was injected
      into the clone.
   </p>
   <div class=code-caption>Example HTML</div>
<pre><code class=language-markup>
&lt;div id=book class=dna_template&gt;
   ~~title~~
&lt;/div&gt;
</code></pre>
   <div class=code-caption>Example JavaScript</div>
<pre><code class=language-javascript>
function applyBkgnd(elem, data) {
   elem.css('background-image', data.cover);
   };
var options = { fade: true, callback: applyBkgnd };
var book = { title: 'Taskmaster', cover: 'url(cover.png)' };
dna.clone('book', book, options);
</code></pre>
   <!-- Start: Result  -->
   <div class=down-arrow></div>
   <div class=code-caption>Resulting HTML</div>
<pre><code class=language-markup>
&lt;div class=book style="background-image: url(cover.png);"&gt;
   Taskmaster
&lt;/div&gt;
</code></pre>
   <!-- End: Result  -->
   <p>
      <b>Note:</b> It is generally easier to use the <code>data-dna-init</code>
      <a href="#event-element-init">attribute</a> to declare the callback function
      than to use the <code>callback</code> option.
   </p>
</section>

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
<h3 id=structure>Structures and Conditional Logic</h3>

<section id=structure-nested-object>
   <h4>Object Dot Notation (nested objects)</h4>
   <p>
      Use JavaScript object dot notation in DNA fields to reference data fields
      of nested object literals.
   </p>
   <div class=code-caption>Example HTML</div>
<pre><code class=language-markup>
&lt;div id=book class=dna_template&gt;
   First Name: &lt;span&gt;~~author.first~~&lt;/span&gt;
&lt;/div&gt;
</code></pre>
   <div class=code-caption>Example JavaScript</div>
<pre><code class=language-javascript>
var book = {
   title: 'The DOM',
   author: { first: 'Bo', last: 'Smith' }
   };
dna.clone('book', book);
</code></pre>
   <!-- Start: Result  -->
   <div class=down-arrow></div>
   <div class=code-caption>Resulting HTML</div>
<pre><code class=language-markup>
&lt;div class=book&gt;
   First Name: &lt;span&gt;Bo&lt;/span&gt;
&lt;/div&gt;
</code></pre>
   <!-- End: Result  -->
</section>

<section id=structure-thimblerig>
   <h4>Thimblerig (conditional hide and seek logic)</h4>
   <p>
      Use the <code>data-dna-require</code> attribute to indicate that a DOM
      element should only be included if the specified data field has a value.
   </p>
   <p>
      Use the <code>data-dna-missing</code> attribute to indicate that a DOM
      element should only be included if the specified data field does not have
      a value.
   </p>
   <p>
      Use the <code>data-dna-truthy</code> attribute to indicate that a DOM
      element should only be included if the value* of the specified
      data field means true.
   </p>
   <p>
      Use the <code>data-dna-false</code> attribute to indicate that a DOM
      element should only be included if the value* of the specified
      data field means false.
   </p>
   <p>
      *<small><b>Note:</b> Regular JavaScript evaluation determines truthy
      and falsey calculations with the addition that empty arrays plus the
      strings "false", "F", and "0" are all considered falsey.</small>
      <!--
      false, undefined, null, NaN, 0, "0", "" (empty string), [] (empty array), "false" (case insensitive), "f", and "F".
      -->
   </p>
   <div class=code-caption>Example HTML</div>
<pre><code class=language-markup>
&lt;div id=book class=dna_template&gt;
   &lt;span data-dna-require=__title__&gt;~~title~~&lt;/span&gt;
   &lt;span data-dna-missing=__title__&gt;[not found]&lt;/span&gt;
&lt;/div&gt;
</code></pre>
   <div class=code-caption>Example JavaScript</div>
<pre><code class=language-javascript>
dna.clone('book', { author: 'Bo', title: 'The DOM' });
dna.clone('book', { author: 'Jan' });
</code></pre>
   <!-- Start: Result  -->
   <div class=down-arrow></div>
   <div class=code-caption>Resulting HTML</div>
<pre><code class=language-markup>
&lt;div class=book&gt;
   &lt;span&gt;The DOM&lt;/span&gt;
&lt;/div&gt;
&lt;div class=book&gt;
   &lt;span&gt;[not found]&lt;/span&gt;
&lt;/div&gt;
</code></pre>
   <!-- End: Result  -->
</section>

<section id=structure-nested-template>
   <h4>Nested Templates</h4>
   <p>
      For additional flexibility, templates can be nestes and then explicitly
      cloned with calls to <code>dna.clone()</code>.&nbsp;  A nested template
      belongs to a holder template, and the specific holder clone must be
      passed into <code>dna.clone()</code> when cloning a nested template.
   </p>
   <p>
      View source for <a href="test-cases.html">test cases #07</a>.
   </p>
   <p>
      In most cases, a simple <a href="#loop-sub-templates">sub-template array loop</a>
      is the better solution.
   </p>

</section>

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
<h3 id=util>Utilities</h3>
<p>
   The utility functions built into dna.js are available to be called directly in the event that
   they might be generally useful.
</p>
<h5>Utility Functions Overview</h5>
<ol>
   <li><b>dna.ui.deleteElem</b>(elemOrEventOrIndex)</li>
   <li>
      <b>dna.ui.slideFadeDelete</b>(elem)<br>
      <b>dna.ui.slideFadeIn</b>(elem, callback)<br>
      <b>dna.ui.slideFadeOut</b>(elem, callback)<br>
      <b>dna.ui.slideFadeToggle</b>(elem, callback)
   </li>
   <li><b>dna.ui.slidingFlasher</b>(elem, callback)</li>
   <li><b>dna.ui.toElem</b>(elemOrEventOrIndex, that)</li>
   <li><b>dna.util.apply</b>(func, params)</li>
   <li><b>dna.util.realTruth</b>(value)</li>
   <li><b>dna.util.toCamel</b>(codeStr)</li>
   <li><b>dna.util.toCode</b>(camelCaseStr)</li>
   <li><b>dna.util.value</b>(data, field)</li>
</ol>

<!--  dna.ui.deleteElem()  -->
<section id=ui-delete-elem>
   <h4>dna.ui.deleteElem(elemOrEventOrIndex)</h4>
   <div class=api-description>
      A flexible function for removing a jQuery element.
   </div>
   <div class=api-parameters>
      Parameters:
      <ul>
         <li>
            <label><b>elemOrEventOrIndex</b> (jQuery Object, Event, or Index):</label>
            Reference to a jQuery element.
         </li>
      </ul>
   </div>
   <div class=code-caption>Example JavaScript</div>
<pre><code class=language-javascript>
$('.box').last().fadeOut(dna.ui.deleteElem);  //removes last box
dna.ui.deleteElem(('.box').first());  //removes first box
</code></pre>
</section>

<!--  dna.ui.slideFade()  -->
<section id=ui-slide-fade>
   <h4>dna.ui.slideFadeDelete(elem)</h4>
   <h4>dna.ui.slideFadeIn(elem[, callback])</h4>
   <h4>dna.ui.slideFadeOut(elem[, callback])</h4>
   <h4>dna.ui.slideFadeToggle(elem[, callback])</h4>
   <div class=api-description>
      Various functions to apply the smooth slide plus fade effect.
   </div>
   <div class=api-parameters>
      Parameters:
      <ul>
         <li>
            <label><b>elem</b> (jQuery Object):</label>
            Element to be faded in or faded out.
         </li>
         <li>
            <label><b>callback</b> (String or Function):</label>
            String name of a function or an actual function.
         </li>
      </ul>
   </div>
   <div class=code-caption>Example JavaScript</div>
<pre><code class=language-javascript>
dna.ui.slideFadeDelete($('.box').last());  //removes the last box
dna.ui.slideFadeIn($('.box').first());  //shows the box
</code></pre>
</section>

<!--  dna.ui.slidingFlasher()  -->
<section id=ui-sliding-flasher>
   <h4>dna.ui.slidingFlasher(elem[, callback])</h4>
   <div class=api-description>
      Uses a smooth slide down plus fade in effect on an element if it is hidden or a smooth fade in
      flash if the element is already visible &mdash;  intended to display an error message.
   </div>
   <div class=api-parameters>
      Parameters:
      <ul>
         <li>
            <label><b>elem</b> (jQuery Object):</label>
            Element to be displayed.
         </li>
         <li>
            <label><b>callback</b> (String or Function):</label>
            String name of a function or an actual function.
         </li>
      </ul>
   </div>
   <div class=code-caption>Example JavaScript</div>
<pre><code class=language-javascript>
var elem = $('#msg').text('Error!');
dna.ui.slidingFlasher(elem);  //slide down
...
dna.ui.slidingFlasher(elem);  //pulse
</code></pre>
</section>

<!--  dna.ui.toElem()  -->
<section id=ui-to-elem>
   <h4>dna.ui.toElem(elemOrEventOrIndex, that)</h4>
   <div class=api-description>
      A flexible way to get the jQuery element whether it is passed in directly, the target of an
      event, or comes from the jQuery context.
   </div>
   <div class=api-parameters>
      Parameters:
      <ul>
         <li>
            <label><b>elemOrEventOrIndex</b> (jQuery Object, Event, or Index):</label>
            Reference to a jQuery element.
         </li>
         <li>
            <label><b>that</b> (this):</label>
            <code>this</code>.
         </li>
      </ul>
   </div>
   <div class=code-caption>Example JavaScript</div>
<pre><code class=language-javascript>
function logFadeDone(e) { console.log('Gone:', dna.ui.toElem(e, this)); }
$('.box').last().fadeOut(logFadeDone);
</code></pre>
</section>

<!--  dna.util.apply()  -->
<section id=util-apply>
   <h4>dna.util.apply(func, params)</h4>
   <div class=api-description>
      Calls a function passing in the provided parameters.
   </div>
   <div class=api-parameters>
      Parameters:
      <ul>
         <li>
            <label><b>func</b> (String or Function):</label>
            String name of a function or an actual function.
         </li>
         <li>
            <label><b>params</b> (anything or Array):</label>
            A single value to pass into the function or an array of values where each element in
            the array is a parameter passed into the function.
         </li>
      </ul>
   </div>
   <div class=code-caption>Example JavaScript</div>
<pre><code class=language-javascript>
dna.util.apply('app.cart.buy', 7);      //app.cart.buy(7);
dna.util.apply(Math.max, [7, 21, -3]);  //21
dna.util.apply('fadeIn', $('h1'));      //$('h1').fadeIn();
dna.util.apply('css', [$('h1'), { color: 'red' }]);
dna.util.apply('css', [$('h1'), 'color', 'gold']);
</code></pre>
</section>

<!--  dna.util.realTruth()  -->
<section id=util-real-truth>
   <h4>dna.util.realTruth(value)</h4>
   <div class=api-description>
      Looks for the true or false meaning a value.&nbsp;  Whereas JavaScript truthy an falsy is
      more about existence, the "real" truth is for evaluating boolean data as it is often stored
      or transmitted.
   </div>
   <div class=api-parameters>
      Parameters:
      <ul>
         <li>
            <label><b>value</b> (anything):</label>
            Whatever you want to interrogate.
         </li>
      </ul>
   </div>
   <div class=code-caption>Example JavaScript</div>
<pre><code class=language-javascript>
dna.util.realTruth('F');  //false
</code></pre>
   <p>
      Example true values:  <code>true</code>, <code>1</code>, <code>'1'</code>, <code>[5]</code>, <code>'t'</code>, <code>'T'</code>, <code>'TRue'</code>, <code>{}</code>, <code>'Colbert'</code><br>
      Example false values: <code>false</code>, <code>0</code>, <code>'0'</code>, <code>[]</code>, <code>'f'</code>, <code>'F'</code>, <code>'faLSE'</code>, <code>null</code>, <code>undefined</code>
   </p>
</section>

<!--  dna.util.toCamel()  -->
<section id=util-to-camel>
   <h4>dna.util.toCamel(codeStr)</h4>
   <div class=api-description>
      Converts a code made of lowercase letters and dashes into camel case string.
   </div>
   <div class=api-parameters>
      Parameters:
      <ul>
         <li>
            <label><b>codeStr</b> (String):</label>
            A string made of lowercase letters and dashes.
         </li>
      </ul>
   </div>
   <div class=code-caption>Example JavaScript</div>
<pre><code class=language-javascript>
dna.util.toCamel('ready-set-go');  //'readySetGo'
</code></pre>
</section>

<!--  dna.util.toCode()  -->
<section id=util-to-code>
   <h4>dna.util.toCode(camelCaseStr)</h4>
   <div class=api-description>
      Converts a camel case string to a code made of only lowercase letters and dashes.
   </div>
   <div class=api-parameters>
      Parameters:
      <ul>
         <li>
            <label><b>camelCaseStr</b> (String):</label>
            A camel case string.
         </li>
      </ul>
   </div>
   <div class=code-caption>Example JavaScript</div>
<pre><code class=language-javascript>
dna.util.toCode('readySetGo');  //'ready-set-go'
</code></pre>
</section>

<!--  dna.util.value()  -->
<section id=util-value>
   <h4>dna.util.value(data, field)</h4>
   <div class=api-description>
      Retrieve a value from a field within an object.
   </div>
   <div class=api-parameters>
      Parameters:
      <ul>
         <li>
            <label><b>data</b> (Object):</label>
            Object with fields containing data.
         </li>
         <li>
            <label><b>field</b> (String):</label>
            Name of a field within the data object (supports object dot notation for nested
            objects).
         </li>
      </ul>
   </div>
   <div class=code-caption>Example JavaScript</div>
<pre><code class=language-javascript>
dna.util.value({ cart: { items: 7 }}, 'cart.items');  //7
</code></pre>
</section>

<!--#include file="~end.fhtml" -->
